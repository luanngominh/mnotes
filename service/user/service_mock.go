// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package user

import (
	"context"
	"sync"

	"github.com/luanngominh/mnotes/model"
)

var (
	lockServiceMockActive sync.RWMutex
	lockServiceMockCreate sync.RWMutex
	lockServiceMockGet    sync.RWMutex
	lockServiceMockUpdate sync.RWMutex
)

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             ActiveFunc: func(ctx context.Context, userID string, verifyCode string) (*model.User, error) {
// 	               panic("mock out the Active method")
//             },
//             CreateFunc: func(ctx context.Context, u *model.User) (*model.User, error) {
// 	               panic("mock out the Create method")
//             },
//             GetFunc: func(ctx context.Context, query *userQuery) ([]*model.User, error) {
// 	               panic("mock out the Get method")
//             },
//             UpdateFunc: func(ctx context.Context, u *model.User) (*model.User, error) {
// 	               panic("mock out the Update method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// ActiveFunc mocks the Active method.
	ActiveFunc func(ctx context.Context, userID string, verifyCode string) (*model.User, error)

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, u *model.User) (*model.User, error)

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, query *UserQuery) ([]*model.User, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, u *model.User) (*model.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// Active holds details about calls to the Active method.
		Active []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
			// VerifyCode is the verifyCode argument value.
			VerifyCode string
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// U is the u argument value.
			U *model.User
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query *UserQuery
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// U is the u argument value.
			U *model.User
		}
	}
}

// Active calls ActiveFunc.
func (mock *ServiceMock) Active(ctx context.Context, userID string, verifyCode string) (*model.User, error) {
	if mock.ActiveFunc == nil {
		panic("ServiceMock.ActiveFunc: method is nil but Service.Active was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		UserID     string
		VerifyCode string
	}{
		Ctx:        ctx,
		UserID:     userID,
		VerifyCode: verifyCode,
	}
	lockServiceMockActive.Lock()
	mock.calls.Active = append(mock.calls.Active, callInfo)
	lockServiceMockActive.Unlock()
	return mock.ActiveFunc(ctx, userID, verifyCode)
}

// ActiveCalls gets all the calls that were made to Active.
// Check the length with:
//     len(mockedService.ActiveCalls())
func (mock *ServiceMock) ActiveCalls() []struct {
	Ctx        context.Context
	UserID     string
	VerifyCode string
} {
	var calls []struct {
		Ctx        context.Context
		UserID     string
		VerifyCode string
	}
	lockServiceMockActive.RLock()
	calls = mock.calls.Active
	lockServiceMockActive.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ServiceMock) Create(ctx context.Context, u *model.User) (*model.User, error) {
	if mock.CreateFunc == nil {
		panic("ServiceMock.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		U   *model.User
	}{
		Ctx: ctx,
		U:   u,
	}
	lockServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceMockCreate.Unlock()
	return mock.CreateFunc(ctx, u)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedService.CreateCalls())
func (mock *ServiceMock) CreateCalls() []struct {
	Ctx context.Context
	U   *model.User
} {
	var calls []struct {
		Ctx context.Context
		U   *model.User
	}
	lockServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceMockCreate.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ServiceMock) Get(ctx context.Context, query *UserQuery) ([]*model.User, error) {
	if mock.GetFunc == nil {
		panic("ServiceMock.GetFunc: method is nil but Service.Get was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query *UserQuery
	}{
		Ctx:   ctx,
		Query: query,
	}
	lockServiceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockServiceMockGet.Unlock()
	return mock.GetFunc(ctx, query)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedService.GetCalls())
func (mock *ServiceMock) GetCalls() []struct {
	Ctx   context.Context
	Query *UserQuery
} {
	var calls []struct {
		Ctx   context.Context
		Query *UserQuery
	}
	lockServiceMockGet.RLock()
	calls = mock.calls.Get
	lockServiceMockGet.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ServiceMock) Update(ctx context.Context, u *model.User) (*model.User, error) {
	if mock.UpdateFunc == nil {
		panic("ServiceMock.UpdateFunc: method is nil but Service.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		U   *model.User
	}{
		Ctx: ctx,
		U:   u,
	}
	lockServiceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockServiceMockUpdate.Unlock()
	return mock.UpdateFunc(ctx, u)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedService.UpdateCalls())
func (mock *ServiceMock) UpdateCalls() []struct {
	Ctx context.Context
	U   *model.User
} {
	var calls []struct {
		Ctx context.Context
		U   *model.User
	}
	lockServiceMockUpdate.RLock()
	calls = mock.calls.Update
	lockServiceMockUpdate.RUnlock()
	return calls
}
